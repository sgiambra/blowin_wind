
 make.py started: 2018-03-30 16:32:04 C:\Users\giamb\Documents\GitHub\blowin_wind\analysis\descriptive_plots\code 




Execute:  StataSE-64 /e do "./figures.do"

  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   15.0   Copyright 1985-2017 StataCorp LLC
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
     Special Edition                  College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

110-user Stata network perpetual license:
       Serial number:  401506201178
         Licensed to:  Brown University
                       Brown University

Notes:
      1.  Stata is running in batch mode.
      2.  Unicode is supported; see help unicode_advice.
      3.  Maximum number of variables is set to 5000; see help set_maxvar.

. do ./figures.do 

. set more off

. adopath + ../../../lib/stata/gslab_misc/ado
  [1]  (BASE)      "C:\Program Files (x86)\Stata15\ado\base/"
  [2]  (SITE)      "C:\Program Files (x86)\Stata15\ado\site/"
  [3]              "."
  [4]  (PERSONAL)  "c:\ado\personal/"
  [5]  (PLUS)      "c:\ado\plus/"
  [6]  (OLDPLACE)  "c:\ado/"
  [7]              "../../../lib/stata/gslab_misc/ado"

. adopath + ../../../lib/third_party/stata_tools
  [1]  (BASE)      "C:\Program Files (x86)\Stata15\ado\base/"
  [2]  (SITE)      "C:\Program Files (x86)\Stata15\ado\site/"
  [3]              "."
  [4]  (PERSONAL)  "c:\ado\personal/"
  [5]  (PLUS)      "c:\ado\plus/"
  [6]  (OLDPLACE)  "c:\ado/"
  [7]              "../../../lib/stata/gslab_misc/ado"
  [8]              "../../../lib/third_party/stata_tools"

. preliminaries, loadglob("../../../lib/python/wind/input_params.txt")

. 
. program main
  1.     local keep_every 10
  2.     
.     plot_annual_new_turbines
  3.     
.     use "${GoogleDrive}/stata/build_wind_panel/wind_panel_zip_median_listing_sqft.dta", clear
  4.     
.     label var ln_p "Median listing price per sqft (ln $)"
  5.     plot_prices_ts, geo(regionname) time(dt) ///
>         saving(prices_ts_median_zip) stub("median listing price per sqft (ln $)")
  6. 
.     use "${GoogleDrive}/stata/build_wind_panel/wind_panel_zip_zhvi.dta", clear
  7.     
.     replace p = p/1000
  8.     replace ln_p = log(p)
  9.     label var ln_p "ZHVI (ln $1,000)"
 10.     plot_prices_ts, geo(regionname) time(dt) ///
>         saving(prices_ts_zhvi_zip) stub("ZHVI (ln $1,000)")
 11.     build_prices_histogram if p <= 1000, saving(hist_zhvi_prices)
 12.     build_prices_cdf if p <= 1000, keep_every(`keep_every') saving(cdf_zhvi_prices)
 13. 
.     validate_price_data
 14. end

. 
. program plot_annual_new_turbines
  1.     use "${GoogleDrive}/stata/build_wind_panel/new_turbines_zip.dta", clear
  2.     
.     keep if year >= 1998 & year <= 2017
  3.     collapse (count) objectid_1, by(year)
  4. 
.     graph bar (asis) objectid_1, over(year, label(angle(45) labsize(small))) ///
>         ytitle("Annual installed turbines")
  5.     graph export "../output/annual_new_turbines.png", replace
  6. end

. 
. program plot_prices_ts
  1.     syntax, geo(str) time(str) saving(str) stub(str)
  2. 
.     if "`time'" == "dt" {
  3.         local fmt "format(%tmMon-CCYY)"
  4.         local xlab_step 30
  5.     }
  6.     if "`time'" == "year" {
  7.         local xlab_step 5
  8.     }
  9. 
.     preserve
 10.         bys `geo' (`time'): egen ever_wind_farm = max(wind_farm)
 11.         collapse (mean) ln_p, by(ever_wind_farm `time')
 12.         tsset ever_wind_farm `time'
 13.         
.         label var ln_p "Average `stub'"
 14.         qui sum `time'
 15.         
.         graph twoway (tsline ln_p if ever_wind_farm == 0, lpattern(dash) lcolor(gs3))  ///
>             (tsline ln_p if ever_wind_farm == 1, lcolor(gs3)), ytitle(`: var label ln_p') ///
>             xtitle("") xlabel(`r(min)'(`xlab_step')`r(max)', `fmt' labsize(3) angle(45))  ///
>             legend(label(1 "No wind farm") label(2 "Wind farm"))
 16.         graph export "../output/`saving'.png", replace
 17.     restore
 18. end

. 
. program build_prices_histogram
  1.     syntax [if], saving(str)
  2. 
.     histogram ln_p `if', percent
  3.     graph export "../output/`saving'.png", replace
  4. end

. 
. program build_prices_cdf
  1.     syntax [if], keep_every(int) saving(str)
  2. 
.     preserve
  3.         cumul ln_p `if', gen(c_prices)
  4.         label var c_prices "Cumulative probability"
  5.         sort c_prices
  6.         keep if _n == 1 | mod(_n, `keep_every') == 0
  7.         line c_prices ln_p `if'
  8.         graph export "../output/`saving'.png", replace
  9.     restore
 10. end

. 
. program validate_price_data
  1.     use regionname p year using ///
>         "${GoogleDrive}/stata/build_wind_panel/wind_panel_zip_median_listing_sqft.dta", clear
  2.     avg_yearly_change p, stub(median_listing)
  3. 
.     use regionname p year using ///
>         "${GoogleDrive}/stata/build_wind_panel/wind_panel_zip_zhvi.dta", clear
  4.     replace p = p/1000
  5.     avg_yearly_change p, stub(zhvi)
  6. 
.     use regionname year ln_p using ///
>         "${GoogleDrive}/stata/build_wind_panel/wind_panel_zip_fhfa.dta", clear
  7.     gen delta_ln_hpi = D.ln_p
  8.     collapse delta_ln_hpi, by(year)
  9. 
.     merge 1:1 year using "../temp/zhvi_year", ///
>         assert(1 2 3) keep(1 2 3) nogen
 10.     merge 1:1 year using "../temp/median_listing_year", ///
>         assert(1 2 3) keep(1 2 3) nogen
 11. 
.     tsset year
 12.     graph twoway (tsline delta_ln_hpi, lcolor(gs6))  ///
>         (tsline delta_ln_median_listing, lpattern(dash) lcolor(navy)) ///
>         (tsline delta_ln_zhvi, lpattern(shortdash_dot) lcolor(black)), ///
>         ytitle("Average percentage change") legend( ///
>             lab(1 "HPI") lab(2 "Median listing price") lab(3 "ZHVI"))
 13.     graph export "../output/validate_price_data.png", replace
 14. end

. 
. program avg_yearly_change
  1.     syntax anything(name=price_var), stub(str)
  2. 
.     collapse `stub'_year = `price_var', by(regionname year)
  3. 
.     xtset regionname year
  4.     gen ln_`stub'_year = log(`stub'_year)
  5.     gen delta_ln_`stub' = D.ln_`stub'_year
  6.     collapse delta_ln_`stub', by(year)
  7.     save_data "../temp/`stub'_year", key(year) replace
  8. end

. 
. * Execute
. main
(109 observations deleted)
(note: file ../output/annual_new_turbines.png not found)
(file ../output/annual_new_turbines.png written in PNG format)
       panel variable:  ever_wind_farm (strongly balanced)
        time variable:  dt, 2010m1 to 2018m1
                delta:  1 month
(note: file ../output/prices_ts_median_zip.png not found)
(file ../output/prices_ts_median_zip.png written in PNG format)
variable p was long now double
(3,323,835 real changes made)
(3,323,835 real changes made)
       panel variable:  ever_wind_farm (strongly balanced)
        time variable:  dt, 1996m4 to 2018m1
                delta:  1 month
(note: file ../output/prices_ts_zhvi_zip.png not found)
(file ../output/prices_ts_zhvi_zip.png written in PNG format)
(bin=65, start=2.8154087, width=.06295918)
(note: file ../output/hist_zhvi_prices.png not found)
(file ../output/hist_zhvi_prices.png written in PNG format)
(2,991,451 observations deleted)
(note: file ../output/cdf_zhvi_prices.png not found)
(file ../output/cdf_zhvi_prices.png written in PNG format)
       panel variable:  regionname (unbalanced)
        time variable:  year, 2010 to 2018
                delta:  1 unit
(9,309 missing values generated)
(data already sorted by year)
  (0 bytes saved)
==================================================================================================
File: ../temp/median_listing_year
Key: year
==================================================================================================
  9:2(73183):754619878:2737047359

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
        year |          9        2014    2.738613       2010       2018
delta_ln_m~g |          8    .0187141    .0431099  -.0686881   .0617887




(note: file ../temp/median_listing_year.dta not found)
file ../temp/median_listing_year.dta saved
variable p was long now double
(3,323,835 real changes made)
       panel variable:  regionname (unbalanced)
        time variable:  year, 1996 to 2018
                delta:  1 unit
(14,082 missing values generated)
(data already sorted by year)
  (0 bytes saved)
==================================================================================================
File: ../temp/zhvi_year
Key: year
==================================================================================================
  23:2(38665):4031534674:794865491

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
        year |         23        2007     6.78233       1996       2018
delta_ln_z~i |         22     .031681    .0471383  -.0594326   .1033099




(note: file ../temp/zhvi_year.dta not found)
file ../temp/zhvi_year.dta saved
(20,314 missing values generated)

    Result                           # of obs.
    -----------------------------------------
    not matched                            22
        from master                        21  
        from using                          1  

    matched                                22  
    -----------------------------------------

    Result                           # of obs.
    -----------------------------------------
    not matched                            35
        from master                        35  
        from using                          0  

    matched                                 9  
    -----------------------------------------
        time variable:  year, 1975 to 2018
                delta:  1 unit
(note: file ../output/validate_price_data.png not found)
(file ../output/validate_price_data.png written in PNG format)

. 
end of do-file


Execute:  StataSE-64 /e do "./energy_figures.do"

  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   15.0   Copyright 1985-2017 StataCorp LLC
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
     Special Edition                  College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

110-user Stata network perpetual license:
       Serial number:  401506201178
         Licensed to:  Brown University
                       Brown University

Notes:
      1.  Stata is running in batch mode.
      2.  Unicode is supported; see help unicode_advice.
      3.  Maximum number of variables is set to 5000; see help set_maxvar.

. do ./energy_figures.do 

. set more off

. adopath + ../../../lib/stata/gslab_misc/ado
  [1]  (BASE)      "C:\Program Files (x86)\Stata15\ado\base/"
  [2]  (SITE)      "C:\Program Files (x86)\Stata15\ado\site/"
  [3]              "."
  [4]  (PERSONAL)  "c:\ado\personal/"
  [5]  (PLUS)      "c:\ado\plus/"
  [6]  (OLDPLACE)  "c:\ado/"
  [7]              "../../../lib/stata/gslab_misc/ado"

. adopath + ../../../lib/third_party/stata_tools
  [1]  (BASE)      "C:\Program Files (x86)\Stata15\ado\base/"
  [2]  (SITE)      "C:\Program Files (x86)\Stata15\ado\site/"
  [3]              "."
  [4]  (PERSONAL)  "c:\ado\personal/"
  [5]  (PLUS)      "c:\ado\plus/"
  [6]  (OLDPLACE)  "c:\ado/"
  [7]              "../../../lib/stata/gslab_misc/ado"
  [8]              "../../../lib/third_party/stata_tools"

. preliminaries, loadglob("../../../lib/python/wind/input_params.txt")

. 
. program main
  1.     import excel "${GoogleDrive}/raw_data/energy_data/Wind energy capacity_American Wind Energy Association.xls", ///
>         sheet("Foglio1") firstrow
  2. 
.     graph bar (asis) cumulativecapacityMW,                  ///
>         over(year, label(labsize(small)))                   ///
>         ytitle("Cumulative Wind Power Capacity (MW)")       ///
>         note("Source: American Wind Energy Association", span)
  3.     graph export "../output/WindEnergyTrend.png", replace
  4. 
.     import excel "${GoogleDrive}/raw_data/energy_data/Wind energy capacity_American Wind Energy Association.xls", ///
>         sheet("Foglio2") firstrow clear
  5.     
.     foreach v of varlist A-Z{
  6.             local x : variable label `v'
  7.             local q`v' = strtoname("`x'")
  8.             ren `v' `q`v''
  9.     }
 10. 
.     gen world=1
 11.     reshape long _, i(world) j(year)
 12.     rename _ energy_cons
 13. 
.     graph bar (asis) energy_cons, over(year, label(angle(45) labsize(small)))       ///
>         ytitle("World Energy Consumption (Mtoe)") ylabel(5000(5000)15000) exclude0  ///
>         note("Source: Global Energy Statistical Yearbook 2016", span)
 14.     graph export "../output/WorldEnergyConsumption.png", replace
 15. end

. 
. * Execute
. main
(note: file ../output/WindEnergyTrend.png not found)
(file ../output/WindEnergyTrend.png written in PNG format)
(note: j = 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015)

Data                               wide   ->   long
-----------------------------------------------------------------------------
Number of obs.                        1   ->      26
Number of variables                  27   ->       3
j variable (26 values)                    ->   year
xij variables:
                  _1990 _1991 ... _2015   ->   _
-----------------------------------------------------------------------------
(note: file ../output/WorldEnergyConsumption.png not found)
(file ../output/WorldEnergyConsumption.png written in PNG format)

. 
end of do-file

 make.py ended: 2018-03-30 16:32:51
